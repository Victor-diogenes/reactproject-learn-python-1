After learning how to write variables in Python, keep in mind that some words in Python are reserved. Using such terms will result in a crash of your code. The terms reserved in Python are listed below.
1.assert 2.and 3.exec 4 not 5.finally 6.or 7.for 8.break 9.pass 10.class 11. print 12.global 13.import 14. del 15.while 16.lamba .17except 18.else 19 except. 20. return
The list below shows the most reserved words in Python. Python treats words like lambda as functions. As we progress through this course, you will come across additional reserved words.

Python data types .
Data types are the most important aspect of programming. A better understanding of data types allows one to understand when and where certain data types should be used. When naming a variable, for example, a string is used. A list of Python data types is shown in the box below.
table
Text type str
sequence types list , tuple, range
mapping type dict
set  types set, frozenset
numeric types int, float, complex
boolean type : bool
binary types bytes, bytearray, memoryview
none type NoneType

If you want to get the data type in Python, use the type() function in a print statement. The variable to be printed is then passed inside the type() function. For example,
age = 9
print(type(age))

output
int

So how do you set a data type? Data types are set by assigning a value to a variable.
example

name = "Peter" # string
age = 24 # int
height = 6.2 float

Congratulation, now you know how to set a data type. Now let's dive into the details.

Python Numbers
They are used to store numeric data types and they are created by assigning an integer, float, or complex into a variable.
A positive natural number (1, 2, 3, etc.) or a negative integer with a minus sign (1, 2, 3, etc.) is an integer. [1] The negative numbers are the additive inverses of their positive counterparts.

example
age = 24 # int
height = 5.6 # float
mileage = 12j # complex

If you want to make sure the data type assigned to a variable is a number , use casting.
example
age = int(24)
height = float(5.6)
mileage = complex(12j)

??
n/b Casting is a technique used to ensure that a variable's data type is a number.
Casting is used to ensure that the data type assigned to a variable is a number./??

In some cases, you may need to convert one data type to another. This is possible with int(), float(), and complex().
example
x = 2 # int
y= 6.7 #float
k = 2j # complex
#convert from int to float
a = float(x)

#convert from float to int
b = int(y)

#convert from int to complex
c = complex(x)

Python strings
Python strings are surrounded by either single or double quotation marks.
example
name = "John"

print(name)
output
John

To assign a multiline string to a variable, use three single quotes or three double quotes.

description = '''Use three single or three double quotes to assign a multiline string to a variable. '''

or

description = """Use three single or three double quotes to assign a multiline string to a variable."""

Strings in Python are regarded as arrays of bytes representing Unicode characters. To access a string element, use square brackets.

example
name = " Patrick "
print(name[1])

output
a
To return a portion of the string, specify the start and end indexes, separated by a colon.
example
name = 'John'
print (name[0:2])

output
jo

By omitting the end index, the range will be extended to the end:

example
name = 'john'
print(name[1:])
output
ohn

To begin the slice at the end of the string, use negative indexes.

example
name = 'Edward'
print(name[-3:-1])

output
ar

Because strings are arrays, we can use for loop to loop through the characters in a string.
example

name = 'John'

for x in name :
print(x)

output
j
o
h
n

The length of a string is returned by the len() function:

example
name = 'John'
print(len(name))

output
4

We can use the keyword in to see if a specific phrase or character is present in a string.
example
description = 'The keyword in can be used to determine whether a specific phrase or character is present in a string.'

print ("string" in description)
output
True

The keyword not in can be used to check if a specific phrase or character is NOT present in a string.

example
description = "The keyword not in can be used to check if a specific phrase or character is NOT present in a string."

print ("victorcodes.com" not in description)

output
True

Python includes a number of built-in methods for working with strings.
Let list them down.

Boolean Data types
In programming, it is frequently necessary to determine whether an expression is True or False.In Python, you can evaluate any expression and get one of two answers: True or False.When you compare two values, Python evaluates the expression and returns the Boolean answer:

example

print(10 < 9)
print (9 >4)
print ( 4 == 4)

output
False
True
True

Python tuples
A tuple is a sequence data type that is similar to a list. A tuple is a set of values separated by commas. Tuples, unlike lists, are surrounded by parentheses.
The items in a tuple are ordered, unchangeable, and allow for duplicate values.

creating a tuple
fruits = ('oranges', 'mangoes', pineapples')

To create a tuple, you can also use the tuple() constructor.
example

fruits = tuple(('mango', 'pineapples','oranges'))

Use the len() function to determine the length of a tuple.
example
fruits = ('oranges', 'mangoes', pineapples')
print(len(fruits))

output
3

N/B
When making a tuple with only one item, you must include a comma after the item.
example
fruit = ("mango",)

How to access items in a tuple

You can get tuple items by using the index number enclosed in square brackets.
example

fruits =('mangoes', 'oranges', 'pineapples')

print(fruits[2])
print(fruits[1:2])
output
pineapples
oranges

You cannot change the values of a tuple once it has been created. Tuples are unchangeable, or immutable as they are also known.However, there is a workaround. You can convert the tuple to a list, modify the list, and then convert the list back to a tuple.
example
fruits =('mangoes', 'oranges', 'pineapples')
list_of_fruits = list(fruits)
list_of_fruits [1] = 'avocado'
tuple_of_fruits = tuple(list_of_fruits)
print(tuple_of_fruits)

output
('mangoes', 'avocado', 'pineapples')

unpacking

We can also extract the values back into variables in Python. This is known as "unpacking".

example
fruits =('mangoes', 'oranges', 'pineapples')
(x, y, z) = fruits
print(x)
print(y)
print(z)

output
mangoes
oranges
pineapples

or

fruits =('mangoes', 'oranges', 'pineapples', 'avocado')

(x, y, \*z) = fruits

print(x)
print(y)
print(z)

output
mangoes
oranges
['pineapples', 'avocado']

note:The + operator can be used to join two or more tuples.

Python List

A Python string is a collection of characters surrounded by single, double, or triple quotes.
List items can be ordered, changed, and have duplicate values.
creating a list
fruits = ['apples', 'mangoes', 'oranges']


Use the len() function to find out how many items are in a list.
When creating a new list, you can also use the list() constructor.
example

fruits = (('aples', 'mangoes', avocado'))

manipulation of a list

Indexes and ranges of indexes can be used to access list items.
example

fruits = ['apples', 'mangoes', 'oranges', 'avacado']

print (fruits[1])
print(fruits[-1])
print(fruits[1: 3])
print(fruits[1:])
print(fruits[:2])
print(fruits[-3:-1])

output
mangoes
oranges
['mangoes', 'oranges']
['mangoes', 'oranges', 'avacado']
['apples', 'mangoes']
['mangoes', 'oranges']

Use append(), extend(), insert (), or the index number to change, add, or remove items from a list.
example

fruits = ['mangoes', 'oranges']
fruits [1] = 'avacado'
print(fruits)

output
['mangoes', 'avacado']



fruits = ['apples', 'mangoes', 'oranges', 'avacado']

fruits [1:2] = ["banana"]
print(fruits)

output
['apples', 'banana', 'oranges', 'avacado']


fruits =["mangoes","oranges"]
fruits.insert(1, "watermelon")
print(fruits)

output
['mangoes', 'watermelon', 'oranges']


fruits =["mangoes","oranges"]
fruits.append("avocado")
print(fruits)

output
['mangoes', 'oranges', 'avocado']


fruits =["mangoes","oranges"]
animals = ['cat','kiwi' ]
fruits.extend(animals)
print(fruits)

output
['mangoes', 'oranges', 'cat', 'kiwi']



fruits = ['mangoes', 'oranges', 'avocado']
fruits.remove('mangoes')
print(fruits)

output
['oranges', 'avocado']


fruits = ['mangoes', 'oranges', 'avocado']
fruits.pop(1)
print(fruits)

output
['mangoes', 'avocado']


fruits = ['mangoes', 'oranges', 'avocado']
fruits.clear()
print(fruits)

output
[]


python sets
Sets are used to store a number of items in a single variable. Sets are denoted by curly brackets. A set is a collection that is unordered, unchangeable*, and unindexed.

creating sets 

animals = {'cat', 'cow', 'lion'}

To create a set, you can also use the set() constructor.
example
animals = (('cat', 'cow', 'lion'))



Many of the operations available for Python's other composite data types do not apply to sets. Sets, for example, cannot be indexed or sliced. Python, on the other hand, provides a plethora of operations on set objects that generally mimic the operations defined for mathematical sets.
Let's access set items by looping through using a for loop.

animals = {'cat', 'cow', 'lion'}
for x in animals:
print(x)

output
cat
cow
lion


animals = {'cat', 'cow', 'lion'}
animals.add('hyena')
print(animals)

output
{'cow', 'hyena', 'cat', 'lion'}

animals = {'cat', 'cow', 'lion'}
domestic = {'sheep', 'dog'}

animals.update(domestic)
print(animals)

output
{'sheep', 'dog', 'cat', 'cow', 'lion'}

note : You can add any iterable into a set 
example
animals = {'cat', 'cow', 'lion'}
fruits = ['mangoes', 'oranges']
animals.update(fruits)
print(animals)

output
{'cat', 'cow', 'oranges', 'mangoes', 'lion'}


Let's take something out of a set.
animals = {'cat', 'cow', 'lion'}
animals.remove('lion')
print(animals)

output
{'cat', 'cow'}
Make sure the item to be removed exists before using the remove() function; otherwise, Python will throw an error.


Other methods used to remove items from a set are del, clear(),pop(), discard().

Python Dictionary
Dictionaries are used to store key-value pairs of data values.
A dictionary is an ordered*, changeable collection that does not allow duplicates.

creating a dictionary

info = {
    "name": "John",
    "age": 25,
    "sex": "male"
}
Use the len() function to find out how many items are in a dictionary.
A dictionary's items can be accessed by referring to its key name, which is enclosed in square brackets.

example
info = {
    "name": "John",
    "age": 25,
    "sex": "male"
}
x = info['age']
print(x)

output
25

or 
info = {
    "name": "John",
    "age": 25,
    "sex": "male"
}

x= info.get('age')
print(x)

output
25


You may want to look up the key or values in a dictionary at some point. You can get them by calling keys() or values().
 example
info = {
    "name": "John",
    "age": 25,
    "sex": "male"
}
x = info.keys()
y = info.values()
print(x)
print(y)

output
dict_keys(['name', 'age', 'sex'])
dict_values(['John', 25, 'male'])

Manipulation of the Dictionary
In this chapter, we are going to add, remove, and change items in a dictionary.
In contrast to a set, which is unordered, unchangeable*, and unindexed, we can access its items using a key name.


example
info = {
    "name": "John",
    "age": 25,
    "sex": "male"
}
info['name'] = 'Peter'
print(info)

output
{'name': 'Peter', 'age': 25, 'sex': 'male'}

The dictionary will be updated with the items from the given argument using the update() method.
 example
info = {
    "name": "John",
    "age": 25,
    "sex": "male"
}

info.update({"age": 20})
print(info)

output
{'name': 'John', 'age': 20, 'sex': 'male'}

Let's now remove items from a dictionary.

info = {
    "name": "John",
    "age": 25,
    "sex": "male"
}

info.pop("sex")

print(info)

output
{'name': 'John', 'age': 25}


del, clear(), and popitem() are other methods for removing items from dictionaries ()



User Input
Users are asked to enter input into the Python program. Python accepts search input, which is then executed and displayed on the screen or saved in a database. Python 3.6 uses the input() method to obtain user input, whereas Python 2.7 uses the raw input() method.
Exemplification is the most effective way to demonstrate how Python accepts user input. The following example shows two methods for gathering user input.

name = input("Enter your name:")
age = input("Enter your age")

print(" My name is " + name + " and i am "+ age + "years of age")

prompt message on the screen

Enter your name: 

Once you enter your name another prompt message will show 

Enter your age:

output 

My name is Victor and I am 22 years of age 


Because I entered my name and age into the program, the above output displayed my name.

name = raw_input("Enter your name:")
age = raw_input("Enter your age")

print(" My name is " + name + " and i am "+ age + "years of age")

prompt message on the screen

Enter your name: 

Once you enter your name another prompt message will show 

Enter your age:

output 

My name is Victor and I am 22 years of age 













